// Code generated by goa v3.2.5, DO NOT EDIT.
//
// stuff HTTP server types
//
// Command:
// $ goa gen simpleapi/design

package server

import (
	stuff "simpleapi/gen/stuff"
	stuffviews "simpleapi/gen/stuff/views"

	goa "goa.design/goa/v3/pkg"
)

// AddRequestBody is the type of the "stuff" service "Add" endpoint HTTP
// request body.
type AddRequestBody struct {
	// Title
	Title *string `form:"Title,omitempty" json:"Title,omitempty" xml:"Title,omitempty"`
	// Author name
	Author *string `form:"Author,omitempty" json:"Author,omitempty" xml:"Author,omitempty"`
	// Description
	Desc *string `form:"Desc,omitempty" json:"Desc,omitempty" xml:"Desc,omitempty"`
	// Content description
	Content *string `form:"Content,omitempty" json:"Content,omitempty" xml:"Content,omitempty"`
}

// StoredArticleResponseCollection is the type of the "stuff" service "list"
// endpoint HTTP response body.
type StoredArticleResponseCollection []*StoredArticleResponse

// ShowResponseBody is the type of the "stuff" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	// ID is the unique id of the article
	ID      *int    `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Title   *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	Author  *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	Desc    *string `form:"desc,omitempty" json:"desc,omitempty" xml:"desc,omitempty"`
	Content *string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
	Admin   *string `form:"admin,omitempty" json:"admin,omitempty" xml:"admin,omitempty"`
}

// ShowNotFoundResponseBody is the type of the "stuff" service "show" endpoint
// HTTP response body for the "NotFound" error.
type ShowNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowTimeoutResponseBody is the type of the "stuff" service "show" endpoint
// HTTP response body for the "Timeout" error.
type ShowTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowInternalErrorResponseBody is the type of the "stuff" service "show"
// endpoint HTTP response body for the "InternalError" error.
type ShowInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StoredArticleResponse is used to define fields on response body types.
type StoredArticleResponse struct {
	// ID is the unique id of the article
	ID      *int    `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Title   *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	Author  *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	Desc    *string `form:"desc,omitempty" json:"desc,omitempty" xml:"desc,omitempty"`
	Content *string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
	Admin   *string `form:"admin,omitempty" json:"admin,omitempty" xml:"admin,omitempty"`
}

// NewStoredArticleResponseCollection builds the HTTP response body from the
// result of the "list" endpoint of the "stuff" service.
func NewStoredArticleResponseCollection(res stuffviews.StoredArticleCollectionView) StoredArticleResponseCollection {
	body := make([]*StoredArticleResponse, len(res))
	for i, val := range res {
		body[i] = marshalStuffviewsStoredArticleViewToStoredArticleResponse(val)
	}
	return body
}

// NewShowResponseBody builds the HTTP response body from the result of the
// "show" endpoint of the "stuff" service.
func NewShowResponseBody(res *stuffviews.StoredArticleView) *ShowResponseBody {
	body := &ShowResponseBody{
		ID:      res.ID,
		Title:   res.Title,
		Author:  res.Author,
		Desc:    res.Desc,
		Content: res.Content,
		Admin:   res.Admin,
	}
	return body
}

// NewShowNotFoundResponseBody builds the HTTP response body from the result of
// the "show" endpoint of the "stuff" service.
func NewShowNotFoundResponseBody(res *goa.ServiceError) *ShowNotFoundResponseBody {
	body := &ShowNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowTimeoutResponseBody builds the HTTP response body from the result of
// the "show" endpoint of the "stuff" service.
func NewShowTimeoutResponseBody(res *goa.ServiceError) *ShowTimeoutResponseBody {
	body := &ShowTimeoutResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowInternalErrorResponseBody builds the HTTP response body from the
// result of the "show" endpoint of the "stuff" service.
func NewShowInternalErrorResponseBody(res *goa.ServiceError) *ShowInternalErrorResponseBody {
	body := &ShowInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddPayload builds a stuff service Add endpoint payload.
func NewAddPayload(body *AddRequestBody, admin *string) *stuff.AddPayload {
	v := &stuff.AddPayload{
		Title:   *body.Title,
		Author:  *body.Author,
		Desc:    body.Desc,
		Content: body.Content,
	}
	v.Admin = admin

	return v
}

// NewShowPayload builds a stuff service show endpoint payload.
func NewShowPayload(id int) *stuff.ShowPayload {
	v := &stuff.ShowPayload{}
	v.ID = id

	return v
}

// ValidateAddRequestBody runs the validations defined on AddRequestBody
func ValidateAddRequestBody(body *AddRequestBody) (err error) {
	if body.Author == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Author", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Title", "body"))
	}
	return
}
