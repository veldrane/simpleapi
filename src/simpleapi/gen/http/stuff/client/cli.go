// Code generated by goa v3.2.5, DO NOT EDIT.
//
// stuff HTTP client CLI support package
//
// Command:
// $ goa gen simpleapi/design

package client

import (
	"encoding/json"
	"fmt"
	stuff "simpleapi/gen/stuff"
	"strconv"
)

// BuildAddPayload builds the payload for the stuff Add endpoint from CLI flags.
func BuildAddPayload(stuffAddBody string, stuffAddAdmin string) (*stuff.AddPayload, error) {
	var err error
	var body AddRequestBody
	{
		err = json.Unmarshal([]byte(stuffAddBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"Author\": \"Neque in voluptatem nihil totam tenetur quis.\",\n      \"Content\": \"Iusto recusandae aperiam molestias dignissimos autem.\",\n      \"Desc\": \"Accusamus ut est esse.\",\n      \"Title\": \"Commodi labore repellat est.\"\n   }'")
		}
	}
	var admin *string
	{
		if stuffAddAdmin != "" {
			admin = &stuffAddAdmin
		}
	}
	v := &stuff.AddPayload{
		Title:   body.Title,
		Author:  body.Author,
		Desc:    body.Desc,
		Content: body.Content,
	}
	v.Admin = admin

	return v, nil
}

// BuildShowPayload builds the payload for the stuff show endpoint from CLI
// flags.
func BuildShowPayload(stuffShowID string) (*stuff.ShowPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(stuffShowID, 10, 64)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &stuff.ShowPayload{}
	v.ID = id

	return v, nil
}
