// Code generated by goa v3.2.5, DO NOT EDIT.
//
// stuff HTTP client types
//
// Command:
// $ goa gen simpleapi/design

package client

import (
	stuff "simpleapi/gen/stuff"
	stuffviews "simpleapi/gen/stuff/views"

	goa "goa.design/goa/v3/pkg"
)

// AddRequestBody is the type of the "stuff" service "Add" endpoint HTTP
// request body.
type AddRequestBody struct {
	// Title
	Title string `form:"Title" json:"Title" xml:"Title"`
	// Author name
	Author string `form:"Author" json:"Author" xml:"Author"`
	// Description
	Desc *string `form:"Desc,omitempty" json:"Desc,omitempty" xml:"Desc,omitempty"`
	// Content description
	Content *string `form:"Content,omitempty" json:"Content,omitempty" xml:"Content,omitempty"`
}

// ListResponseBody is the type of the "stuff" service "list" endpoint HTTP
// response body.
type ListResponseBody []*StoredArticleResponse

// ShowResponseBody is the type of the "stuff" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	// ID is the unique id of the article
	ID      *int    `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Title   *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	Author  *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	Desc    *string `form:"desc,omitempty" json:"desc,omitempty" xml:"desc,omitempty"`
	Content *string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
	Admin   *string `form:"admin,omitempty" json:"admin,omitempty" xml:"admin,omitempty"`
}

// ShowNotFoundResponseBody is the type of the "stuff" service "show" endpoint
// HTTP response body for the "NotFound" error.
type ShowNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowTimeoutResponseBody is the type of the "stuff" service "show" endpoint
// HTTP response body for the "Timeout" error.
type ShowTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowInternalErrorResponseBody is the type of the "stuff" service "show"
// endpoint HTTP response body for the "InternalError" error.
type ShowInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// StoredArticleResponse is used to define fields on response body types.
type StoredArticleResponse struct {
	// ID is the unique id of the article
	ID      *int    `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Title   *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	Author  *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	Desc    *string `form:"desc,omitempty" json:"desc,omitempty" xml:"desc,omitempty"`
	Content *string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
	Admin   *string `form:"admin,omitempty" json:"admin,omitempty" xml:"admin,omitempty"`
}

// NewAddRequestBody builds the HTTP request body from the payload of the "Add"
// endpoint of the "stuff" service.
func NewAddRequestBody(p *stuff.AddPayload) *AddRequestBody {
	body := &AddRequestBody{
		Title:   p.Title,
		Author:  p.Author,
		Desc:    p.Desc,
		Content: p.Content,
	}
	return body
}

// NewListStoredArticleCollectionOK builds a "stuff" service "list" endpoint
// result from a HTTP "OK" response.
func NewListStoredArticleCollectionOK(body ListResponseBody) stuffviews.StoredArticleCollectionView {
	v := make([]*stuffviews.StoredArticleView, len(body))
	for i, val := range body {
		v[i] = unmarshalStoredArticleResponseToStuffviewsStoredArticleView(val)
	}
	return v
}

// NewShowStoredArticleOK builds a "stuff" service "show" endpoint result from
// a HTTP "OK" response.
func NewShowStoredArticleOK(body *ShowResponseBody) *stuffviews.StoredArticleView {
	v := &stuffviews.StoredArticleView{
		ID:      body.ID,
		Title:   body.Title,
		Author:  body.Author,
		Desc:    body.Desc,
		Content: body.Content,
		Admin:   body.Admin,
	}

	return v
}

// NewShowNotFound builds a stuff service show endpoint NotFound error.
func NewShowNotFound(body *ShowNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewShowTimeout builds a stuff service show endpoint Timeout error.
func NewShowTimeout(body *ShowTimeoutResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewShowInternalError builds a stuff service show endpoint InternalError
// error.
func NewShowInternalError(body *ShowInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateShowNotFoundResponseBody runs the validations defined on
// show_NotFound_response_body
func ValidateShowNotFoundResponseBody(body *ShowNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowTimeoutResponseBody runs the validations defined on
// show_Timeout_response_body
func ValidateShowTimeoutResponseBody(body *ShowTimeoutResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowInternalErrorResponseBody runs the validations defined on
// show_InternalError_response_body
func ValidateShowInternalErrorResponseBody(body *ShowInternalErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
