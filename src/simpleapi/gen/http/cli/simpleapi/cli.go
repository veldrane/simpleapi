// Code generated by goa v3.2.5, DO NOT EDIT.
//
// simpleapi HTTP client CLI support package
//
// Command:
// $ goa gen simpleapi/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"
	failuresc "simpleapi/gen/http/failures/client"
	rootc "simpleapi/gen/http/root/client"
	stuffc "simpleapi/gen/http/stuff/client"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `root default
failures (get-timeout|set-timeout)
stuff (list|add|show)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` root default` + "\n" +
		os.Args[0] + ` failures get-timeout` + "\n" +
		os.Args[0] + ` stuff list` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		rootFlags = flag.NewFlagSet("root", flag.ContinueOnError)

		rootDefaultFlags = flag.NewFlagSet("default", flag.ExitOnError)

		failuresFlags = flag.NewFlagSet("failures", flag.ContinueOnError)

		failuresGetTimeoutFlags = flag.NewFlagSet("get-timeout", flag.ExitOnError)

		failuresSetTimeoutFlags    = flag.NewFlagSet("set-timeout", flag.ExitOnError)
		failuresSetTimeoutBodyFlag = failuresSetTimeoutFlags.String("body", "REQUIRED", "")

		stuffFlags = flag.NewFlagSet("stuff", flag.ContinueOnError)

		stuffListFlags = flag.NewFlagSet("list", flag.ExitOnError)

		stuffAddFlags     = flag.NewFlagSet("add", flag.ExitOnError)
		stuffAddBodyFlag  = stuffAddFlags.String("body", "REQUIRED", "")
		stuffAddAdminFlag = stuffAddFlags.String("admin", "", "")

		stuffShowFlags  = flag.NewFlagSet("show", flag.ExitOnError)
		stuffShowIDFlag = stuffShowFlags.String("id", "REQUIRED", "Id of article to show")
	)
	rootFlags.Usage = rootUsage
	rootDefaultFlags.Usage = rootDefaultUsage

	failuresFlags.Usage = failuresUsage
	failuresGetTimeoutFlags.Usage = failuresGetTimeoutUsage
	failuresSetTimeoutFlags.Usage = failuresSetTimeoutUsage

	stuffFlags.Usage = stuffUsage
	stuffListFlags.Usage = stuffListUsage
	stuffAddFlags.Usage = stuffAddUsage
	stuffShowFlags.Usage = stuffShowUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "root":
			svcf = rootFlags
		case "failures":
			svcf = failuresFlags
		case "stuff":
			svcf = stuffFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "root":
			switch epn {
			case "default":
				epf = rootDefaultFlags

			}

		case "failures":
			switch epn {
			case "get-timeout":
				epf = failuresGetTimeoutFlags

			case "set-timeout":
				epf = failuresSetTimeoutFlags

			}

		case "stuff":
			switch epn {
			case "list":
				epf = stuffListFlags

			case "add":
				epf = stuffAddFlags

			case "show":
				epf = stuffShowFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "root":
			c := rootc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "default":
				endpoint = c.Default()
				data = nil
			}
		case "failures":
			c := failuresc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-timeout":
				endpoint = c.GetTimeout()
				data = nil
			case "set-timeout":
				endpoint = c.SetTimeout()
				data, err = failuresc.BuildSetTimeoutPayload(*failuresSetTimeoutBodyFlag)
			}
		case "stuff":
			c := stuffc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list":
				endpoint = c.List()
				data = nil
			case "add":
				endpoint = c.Add()
				data, err = stuffc.BuildAddPayload(*stuffAddBodyFlag, *stuffAddAdminFlag)
			case "show":
				endpoint = c.Show()
				data, err = stuffc.BuildShowPayload(*stuffShowIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// rootUsage displays the usage of the root command and its subcommands.
func rootUsage() {
	fmt.Fprintf(os.Stderr, `Service provide redirect to swagger-ui
Usage:
    %s [globalflags] root COMMAND [flags]

COMMAND:
    default: Return default redirect

Additional help:
    %s root COMMAND --help
`, os.Args[0], os.Args[0])
}
func rootDefaultUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] root default

Return default redirect

Example:
    `+os.Args[0]+` root default
`, os.Args[0])
}

// failuresUsage displays the usage of the failures command and its subcommands.
func failuresUsage() {
	fmt.Fprintf(os.Stderr, `Service provides management for generating failures on stuff api
Usage:
    %s [globalflags] failures COMMAND [flags]

COMMAND:
    get-timeout: List all stored articles
    set-timeout: Manage timeouts on the /article/{id} endpoint

Additional help:
    %s failures COMMAND --help
`, os.Args[0], os.Args[0])
}
func failuresGetTimeoutUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] failures get-timeout

List all stored articles

Example:
    `+os.Args[0]+` failures get-timeout
`, os.Args[0])
}

func failuresSetTimeoutUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] failures set-timeout -body JSON

Manage timeouts on the /article/{id} endpoint
    -body JSON: 

Example:
    `+os.Args[0]+` failures set-timeout --body '{
      "TimeOutRate": 4272162809011000182
   }'
`, os.Args[0])
}

// stuffUsage displays the usage of the stuff command and its subcommands.
func stuffUsage() {
	fmt.Fprintf(os.Stderr, `Service provides management od articles stuff
Usage:
    %s [globalflags] stuff COMMAND [flags]

COMMAND:
    list: List all stored articles
    add: Add article to the articles
    show: Show article by id

Additional help:
    %s stuff COMMAND --help
`, os.Args[0], os.Args[0])
}
func stuffListUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] stuff list

List all stored articles

Example:
    `+os.Args[0]+` stuff list
`, os.Args[0])
}

func stuffAddUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] stuff add -body JSON -admin STRING

Add article to the articles
    -body JSON: 
    -admin STRING: 

Example:
    `+os.Args[0]+` stuff add --body '{
      "Author": "Neque in voluptatem nihil totam tenetur quis.",
      "Content": "Iusto recusandae aperiam molestias dignissimos autem.",
      "Desc": "Accusamus ut est esse.",
      "Title": "Commodi labore repellat est."
   }' --admin "Adipisci animi illo omnis."
`, os.Args[0])
}

func stuffShowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] stuff show -id INT

Show article by id
    -id INT: Id of article to show

Example:
    `+os.Args[0]+` stuff show --id 3355690348190133789
`, os.Args[0])
}
