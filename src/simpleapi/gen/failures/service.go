// Code generated by goa v3.2.5, DO NOT EDIT.
//
// failures service
//
// Command:
// $ goa gen simpleapi/design

package failures

import (
	"context"
	failuresviews "simpleapi/gen/failures/views"

	goa "goa.design/goa/v3/pkg"
)

// Service provides management for generating failures on stuff api
type Service interface {
	// List all stored articles
	GetTimeout(context.Context) (res *TimeOutRate, err error)
	// Manage timeouts on the /article/{id} endpoint
	SetTimeout(context.Context, *SetTimeoutPayload) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "failures"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"GetTimeout", "SetTimeout"}

// TimeOutRate is the result type of the failures service GetTimeout method.
type TimeOutRate struct {
	// rate ot the timeouts in percent
	Timeoutrate *int
}

// SetTimeoutPayload is the payload type of the failures service SetTimeout
// method.
type SetTimeoutPayload struct {
	// Rate of the failures on /article/{id}
	TimeOutRate int
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "BadRequest",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewTimeOutRate initializes result type TimeOutRate from viewed result type
// TimeOutRate.
func NewTimeOutRate(vres *failuresviews.TimeOutRate) *TimeOutRate {
	return newTimeOutRate(vres.Projected)
}

// NewViewedTimeOutRate initializes viewed result type TimeOutRate from result
// type TimeOutRate using the given view.
func NewViewedTimeOutRate(res *TimeOutRate, view string) *failuresviews.TimeOutRate {
	p := newTimeOutRateView(res)
	return &failuresviews.TimeOutRate{Projected: p, View: "default"}
}

// newTimeOutRate converts projected type TimeOutRate to service type
// TimeOutRate.
func newTimeOutRate(vres *failuresviews.TimeOutRateView) *TimeOutRate {
	res := &TimeOutRate{
		Timeoutrate: vres.Timeoutrate,
	}
	return res
}

// newTimeOutRateView projects result type TimeOutRate to projected type
// TimeOutRateView using the "default" view.
func newTimeOutRateView(res *TimeOutRate) *failuresviews.TimeOutRateView {
	vres := &failuresviews.TimeOutRateView{
		Timeoutrate: res.Timeoutrate,
	}
	return vres
}
