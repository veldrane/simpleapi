// Code generated by goa v3.2.5, DO NOT EDIT.
//
// stuff service
//
// Command:
// $ goa gen simpleapi/design

package stuff

import (
	"context"
	stuffviews "simpleapi/gen/stuff/views"

	goa "goa.design/goa/v3/pkg"
)

// Service provides management od articles stuff
type Service interface {
	// List all stored articles
	List(context.Context) (res StoredArticleCollection, err error)
	// Add article to the articles
	Add(context.Context, *AddPayload) (err error)
	// Show article by id
	Show(context.Context, *ShowPayload) (res *StoredArticle, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "stuff"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"list", "Add", "show"}

// StoredArticleCollection is the result type of the stuff service list method.
type StoredArticleCollection []*StoredArticle

// AddPayload is the payload type of the stuff service Add method.
type AddPayload struct {
	// Title
	Title string
	// Author name
	Author string
	// Description
	Desc *string
	// Content description
	Content *string
	// Who stored the column
	Admin *string
}

// ShowPayload is the payload type of the stuff service show method.
type ShowPayload struct {
	// Id of article to show
	ID int
}

// StoredArticle is the result type of the stuff service show method.
type StoredArticle struct {
	// ID is the unique id of the article
	ID      *int
	Title   *string
	Author  *string
	Desc    *string
	Content *string
	Admin   *string
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "NotFound",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeTimeout builds a goa.ServiceError from an error.
func MakeTimeout(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "Timeout",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInternalError builds a goa.ServiceError from an error.
func MakeInternalError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "InternalError",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewStoredArticleCollection initializes result type StoredArticleCollection
// from viewed result type StoredArticleCollection.
func NewStoredArticleCollection(vres stuffviews.StoredArticleCollection) StoredArticleCollection {
	return newStoredArticleCollection(vres.Projected)
}

// NewViewedStoredArticleCollection initializes viewed result type
// StoredArticleCollection from result type StoredArticleCollection using the
// given view.
func NewViewedStoredArticleCollection(res StoredArticleCollection, view string) stuffviews.StoredArticleCollection {
	p := newStoredArticleCollectionView(res)
	return stuffviews.StoredArticleCollection{Projected: p, View: "default"}
}

// NewStoredArticle initializes result type StoredArticle from viewed result
// type StoredArticle.
func NewStoredArticle(vres *stuffviews.StoredArticle) *StoredArticle {
	return newStoredArticle(vres.Projected)
}

// NewViewedStoredArticle initializes viewed result type StoredArticle from
// result type StoredArticle using the given view.
func NewViewedStoredArticle(res *StoredArticle, view string) *stuffviews.StoredArticle {
	p := newStoredArticleView(res)
	return &stuffviews.StoredArticle{Projected: p, View: "default"}
}

// newStoredArticleCollection converts projected type StoredArticleCollection
// to service type StoredArticleCollection.
func newStoredArticleCollection(vres stuffviews.StoredArticleCollectionView) StoredArticleCollection {
	res := make(StoredArticleCollection, len(vres))
	for i, n := range vres {
		res[i] = newStoredArticle(n)
	}
	return res
}

// newStoredArticleCollectionView projects result type StoredArticleCollection
// to projected type StoredArticleCollectionView using the "default" view.
func newStoredArticleCollectionView(res StoredArticleCollection) stuffviews.StoredArticleCollectionView {
	vres := make(stuffviews.StoredArticleCollectionView, len(res))
	for i, n := range res {
		vres[i] = newStoredArticleView(n)
	}
	return vres
}

// newStoredArticle converts projected type StoredArticle to service type
// StoredArticle.
func newStoredArticle(vres *stuffviews.StoredArticleView) *StoredArticle {
	res := &StoredArticle{
		ID:      vres.ID,
		Title:   vres.Title,
		Author:  vres.Author,
		Desc:    vres.Desc,
		Content: vres.Content,
		Admin:   vres.Admin,
	}
	return res
}

// newStoredArticleView projects result type StoredArticle to projected type
// StoredArticleView using the "default" view.
func newStoredArticleView(res *StoredArticle) *stuffviews.StoredArticleView {
	vres := &stuffviews.StoredArticleView{
		ID:      res.ID,
		Title:   res.Title,
		Author:  res.Author,
		Desc:    res.Desc,
		Content: res.Content,
		Admin:   res.Admin,
	}
	return vres
}
